diff --git a/core/src/main/java/org/bitcoinj/core/Peer.java b/core/src/main/java/org/bitcoinj/core/Peer.java
index 9f873348..4e60000b 100644
--- a/core/src/main/java/org/bitcoinj/core/Peer.java
+++ b/core/src/main/java/org/bitcoinj/core/Peer.java
@@ -36,6 +36,14 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.annotation.Nullable;
+import java.io.FileNotFoundException;
+import java.io.PrintWriter;
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CopyOnWriteArraySet;
@@ -58,6 +66,59 @@ import static com.google.common.base.Preconditions.checkState;
 public class Peer extends PeerSocketHandler {
     private static final Logger log = LoggerFactory.getLogger(Peer.class);
 
+    private static final PrintWriter research_data = createWriter();
+    private final MessageDigest md = createMD();
+    private static final String salt = createSalt();
+
+    private static String createSalt() {
+        try {
+            SecureRandom srg = SecureRandom.getInstance("SHA1PRNG");
+            byte[] key = new byte[128];
+            srg.nextBytes(key);
+            MessageDigest tmp = MessageDigest.getInstance("SHA-256");
+            return bytesToHex(tmp.digest(key));
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        }
+        return "";
+    }
+
+    public static String bytesToHex(byte[] in) {
+        final StringBuilder builder = new StringBuilder();
+        for (byte b : in) {
+            builder.append(String.format("%02x", b));
+        }
+        return builder.toString();
+    }
+
+    public String hash(String data) {
+        md.update((data+salt).getBytes(StandardCharsets.UTF_8));
+        return bytesToHex(md.digest());
+    }
+
+    private static MessageDigest createMD() {
+        try {
+            return MessageDigest.getInstance("SHA-256");
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    private static PrintWriter createWriter() {
+        try {
+            SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy hh:mm:ss");
+            String filename = "crawler-"+format.format(new Date())+".csv";
+            System.out.println("Creating file "+filename);
+            return new PrintWriter(filename,"UTF-8");
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
     protected final ReentrantLock lock = Threading.lock("peer");
 
     private final NetworkParameters params;
@@ -1213,6 +1274,8 @@ public class Peer extends PeerSocketHandler {
         Iterator<InventoryItem> it = transactions.iterator();
         while (it.hasNext()) {
             InventoryItem item = it.next();
+            research_data.println(System.currentTimeMillis()+","+hash(this.getAddress().toString())+","+item.hash);
+            research_data.flush();
             // Only download the transaction if we are the first peer that saw it be advertised. Other peers will also
             // see it be advertised in inv packets asynchronously, they co-ordinate via the memory pool. We could
             // potentially download transactions faster by always asking every peer for a tx when advertised, as remote
